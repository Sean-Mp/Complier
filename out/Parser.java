
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import symboltable.SymbolTable;
import symboltable.Symbol;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\022\000\002\003" +
    "\002\000\002\003\003\000\002\031\003\000\002\031\004" +
    "\000\002\004\002\000\002\004\003\000\002\032\003\000" +
    "\002\032\004\000\002\005\002\000\002\005\004\000\002" +
    "\033\002\000\002\024\013\000\002\006\002\000\002\006" +
    "\004\000\002\034\002\000\002\025\013\000\002\030\006" +
    "\000\002\022\002\000\002\022\003\000\002\022\004\000" +
    "\002\022\005\000\002\023\003\000\002\035\002\000\002" +
    "\007\010\000\002\010\003\000\002\011\003\000\002\011" +
    "\005\000\002\012\003\000\002\012\004\000\002\012\006" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\004\000\002\013\010\000\002\013\005\000\002" +
    "\014\007\000\002\014\010\000\002\015\007\000\002\015" +
    "\013\000\002\016\003\000\002\016\003\000\002\021\002" +
    "\000\002\021\003\000\002\021\004\000\002\021\005\000" +
    "\002\017\003\000\002\017\006\000\002\017\007\000\002" +
    "\020\003\000\002\020\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\004\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\041\uffff\042\010\001\002\000\006\041\ufffd\042" +
    "\ufffd\001\002\000\006\041\ufffe\042\201\001\002\000\004" +
    "\041\013\001\002\000\004\005\014\001\002\000\004\040" +
    "\015\001\002\000\006\041\ufff7\042\ufff7\001\002\000\006" +
    "\041\021\042\017\001\002\000\004\036\ufff5\001\002\000" +
    "\006\041\ufff6\042\ufff6\001\002\000\004\006\022\001\002" +
    "\000\004\040\023\001\002\000\006\041\ufff3\042\ufff3\001" +
    "\002\000\006\041\026\042\025\001\002\000\004\036\ufff1" +
    "\001\002\000\004\007\030\001\002\000\006\041\ufff2\042" +
    "\ufff2\001\002\000\004\040\031\001\002\000\004\011\032" +
    "\001\002\000\004\040\035\001\002\000\004\041\034\001" +
    "\002\000\004\002\000\001\002\000\006\041\uffe9\042\uffe9" +
    "\001\002\000\006\041\ufffb\042\037\001\002\000\006\041" +
    "\ufff9\042\ufff9\001\002\000\006\041\ufffa\042\150\001\002" +
    "\000\004\041\042\001\002\000\020\012\055\013\044\014" +
    "\052\015\057\016\045\020\043\042\047\001\002\000\010" +
    "\036\064\042\060\043\062\001\002\000\006\035\uffe4\041" +
    "\uffe4\001\002\000\004\040\133\001\002\000\004\041\uffe7" +
    "\001\002\000\006\034\120\036\117\001\002\000\006\035" +
    "\uffe0\041\uffe0\001\002\000\004\041\uffe8\001\002\000\010" +
    "\042\060\043\062\044\115\001\002\000\006\035\uffdf\041" +
    "\uffdf\001\002\000\006\035\112\041\uffe6\001\002\000\006" +
    "\042\060\043\062\001\002\000\006\035\uffe1\041\uffe1\001" +
    "\002\000\010\036\064\042\060\043\062\001\002\000\036" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\035\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\001\002\000\004\040\106\001\002\000\036\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\001\002\000\032\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\001\002\000\014\022\070\023\066\036\064" +
    "\042\060\043\062\001\002\000\010\036\064\042\060\043" +
    "\062\001\002\000\010\036\uffcb\042\uffcb\043\uffcb\001\002" +
    "\000\022\024\074\025\101\026\072\027\075\030\071\031" +
    "\073\032\077\033\100\001\002\000\010\036\uffcc\042\uffcc" +
    "\043\uffcc\001\002\000\010\036\uffc5\042\uffc5\043\uffc5\001" +
    "\002\000\010\036\uffc7\042\uffc7\043\uffc7\001\002\000\010" +
    "\036\uffc4\042\uffc4\043\uffc4\001\002\000\010\036\uffca\042" +
    "\uffca\043\uffca\001\002\000\010\036\uffc6\042\uffc6\043\uffc6" +
    "\001\002\000\010\036\064\042\060\043\062\001\002\000" +
    "\010\036\uffc3\042\uffc3\043\uffc3\001\002\000\010\036\uffc9" +
    "\042\uffc9\043\uffc9\001\002\000\010\036\uffc8\042\uffc8\043" +
    "\uffc8\001\002\000\004\037\103\001\002\000\032\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002\000\004" +
    "\037\105\001\002\000\032\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\001\002\000\020\012\055\013\044\014" +
    "\052\015\057\016\045\020\043\042\047\001\002\000\004" +
    "\041\110\001\002\000\006\035\uffdb\041\uffdb\001\002\000" +
    "\006\035\uffde\041\uffde\001\002\000\020\012\055\013\044" +
    "\014\052\015\057\016\045\020\043\042\047\001\002\000" +
    "\004\041\uffe5\001\002\000\006\035\uffe3\041\uffe3\001\002" +
    "\000\006\035\uffd6\041\uffd6\001\002\000\006\035\uffd7\041" +
    "\uffd7\001\002\000\010\037\uffd5\042\060\043\062\001\002" +
    "\000\010\036\064\042\121\043\062\001\002\000\010\035" +
    "\uffce\036\123\041\uffce\001\002\000\006\035\uffdc\041\uffdc" +
    "\001\002\000\010\037\uffd5\042\060\043\062\001\002\000" +
    "\004\037\130\001\002\000\010\037\uffd4\042\060\043\062" +
    "\001\002\000\010\037\uffd3\042\060\043\062\001\002\000" +
    "\004\037\uffd2\001\002\000\006\035\uffdd\041\uffdd\001\002" +
    "\000\004\037\132\001\002\000\006\035\uffe2\041\uffe2\001" +
    "\002\000\020\012\055\013\044\014\052\015\057\016\045" +
    "\020\043\042\047\001\002\000\004\041\135\001\002\000" +
    "\004\017\136\001\002\000\010\036\064\042\060\043\062" +
    "\001\002\000\006\035\uffda\041\uffda\001\002\000\004\040" +
    "\141\001\002\000\020\012\055\013\044\014\052\015\057" +
    "\016\045\020\043\042\047\001\002\000\004\041\143\001" +
    "\002\000\010\021\144\035\uffd9\041\uffd9\001\002\000\004" +
    "\040\145\001\002\000\020\012\055\013\044\014\052\015" +
    "\057\016\045\020\043\042\047\001\002\000\004\041\147" +
    "\001\002\000\006\035\uffd8\041\uffd8\001\002\000\006\041" +
    "\ufff8\042\ufff8\001\002\000\004\036\152\001\002\000\006" +
    "\037\uffee\042\153\001\002\000\010\037\uffed\041\uffed\042" +
    "\167\001\002\000\004\037\uffea\001\002\000\004\037\156" +
    "\001\002\000\004\040\157\001\002\000\004\010\161\001" +
    "\002\000\020\012\055\013\044\014\052\015\057\016\045" +
    "\020\043\042\047\001\002\000\004\040\162\001\002\000" +
    "\006\041\uffee\042\153\001\002\000\004\041\164\001\002" +
    "\000\020\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020" +
    "\uffef\042\uffef\001\002\000\004\041\166\001\002\000\006" +
    "\041\ufff0\042\ufff0\001\002\000\010\037\uffec\041\uffec\042" +
    "\170\001\002\000\006\037\uffeb\041\uffeb\001\002\000\004" +
    "\036\172\001\002\000\006\037\uffee\042\153\001\002\000" +
    "\004\037\174\001\002\000\004\040\175\001\002\000\004" +
    "\010\161\001\002\000\020\012\055\013\044\014\052\015" +
    "\057\016\045\020\043\042\047\001\002\000\004\041\200" +
    "\001\002\000\006\041\ufff4\042\ufff4\001\002\000\006\041" +
    "\ufffc\042\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\011\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\004\024\017\001\001\000\004\033\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\023\001\001\000\004\025\026\001\001\000" +
    "\004\034\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\035" +
    "\001\001\000\006\004\040\032\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\050" +
    "\011\045\012\053\013\055\014\047\015\052\001\001\000" +
    "\006\017\137\020\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\113\020\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\110\001" +
    "\001\000\002\001\001\000\006\017\060\020\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\066\020\062\026\064\001\001" +
    "\000\006\017\103\020\062\001\001\000\002\001\001\000" +
    "\004\027\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\101\020\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\106\011\045\012\053\013\055\014\047\015" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\112\012\053\013\055\014\047\015" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\124\021\130\001" +
    "\001\000\006\017\121\020\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\124\021\123\001\001\000" +
    "\002\001\001\000\004\020\125\001\001\000\004\020\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\133\011\045\012\053" +
    "\013\055\014\047\015\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\136\020\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\141\011\045\012" +
    "\053\013\055\014\047\015\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\010\145\011" +
    "\045\012\053\013\055\014\047\015\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\153\023\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\157\001\001\000\016\010\164\011\045\012\053" +
    "\013\055\014\047\015\052\001\001\000\002\001\001\000" +
    "\004\022\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\153\023\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\175\001\001\000\016\010\176\011\045\012\053\013\055" +
    "\014\047\015\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private SymbolTable symbolTable = new SymbolTable();
    private ProgramNode syntaxTree;
    
    public SymbolTable getSymbolTable() {
        return symbolTable;
    }
    
    public ProgramNode getSyntaxTree() {
        return syntaxTree;
    }
    
    // Helper methods for list creation
    private List<String> createList(String first) {
        List<String> list = new ArrayList<>();
        list.add(first);
        return list;
    }
    
    private List<String> appendToList(List<String> list, String item) {
        list.add(item);
        return list;
    }
    
    private List<ASTNode> createList(ASTNode first) {
        List<ASTNode> list = new ArrayList<>();
        list.add(first);
        return list;
    }
    
    private List<ASTNode> appendToList(List<ASTNode> list, ASTNode item) {
        list.add(item);
        return list;
    }
    
    private List<ProcedureNode> createList(ProcedureNode first) {
        List<ProcedureNode> list = new ArrayList<>();
        list.add(first);
        return list;
    }
    
    private List<ProcedureNode> appendToList(List<ProcedureNode> list, ProcedureNode item) {
        list.add(item);
        return list;
    }
    
    private List<FunctionNode> createList(FunctionNode first) {
        List<FunctionNode> list = new ArrayList<>();
        list.add(first);
        return list;
    }
    
    private List<FunctionNode> appendToList(List<FunctionNode> list, FunctionNode item) {
        list.add(item);
        return list;
    }
    
    // Override syntax error reporting - FIXED
    public void syntax_error(Symbol cur_token) {
        System.err.println("Syntax error");
    }
    
    public void report_error(String message, Object info) {
        System.err.println("Parser Error: " + message);
    }

    private ASTNode findReturnValue(List<ASTNode> algorithm) {
        for (ASTNode node : algorithm) {
            if (node instanceof ReturnNode) {
                return ((ReturnNode) node).getReturnValue();
            }
        }
        return null; // No return statement found
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spl_prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spl_prog ::= GLOB LBRACE variables RBRACE PROC LBRACE procs RBRACE FUNC LBRACE funcs RBRACE MAIN LBRACE main_prog RBRACE 
            {
              ProgramNode RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		List<String> vars = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		List<ProcedureNode> procs = (List<ProcedureNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int funcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int funcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<FunctionNode> funcs = (List<FunctionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainProgramNode main = (MainProgramNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                //System.out.println("VALID SPL PROGRAM");
                RESULT = new ProgramNode(vars, procs, funcs, main, -1, -1);
                parser.syntaxTree = (ProgramNode)RESULT;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("spl_prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // variables ::= 
            {
              List<String> RESULT =null;
		 
                 RESULT = new ArrayList<String>(); 
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variables ::= variable_list 
            {
              List<String> RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = vl; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variable_list ::= USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     //System.out.println("GLOBAL VAR: " + name); 
                     Symbol s = parser.symbolTable.addSymbol(name.toString(), "numeric");
                     if (s == null) {
                         System.err.println("Error: Variable '" + name + "' already declared");
                     }
                     RESULT = parser.createList(name.toString());
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_list ::= variable_list USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> vl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     //System.out.println("GLOBAL VAR: " + name); 
                     Symbol s = parser.symbolTable.addSymbol(name.toString(), "numeric");
                     if (s == null) {
                         System.err.println("Error: Variable '" + name + "' already declared");
                     }
                     RESULT = parser.appendToList(vl, name.toString());
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_list",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_variables ::= 
            {
              List<String> RESULT =null;
		 
                     RESULT = new ArrayList<String>(); 
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_variables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_variables ::= main_var_list 
            {
              List<String> RESULT =null;
		int mvlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mvlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> mvl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = mvl; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_variables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_var_list ::= USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     //System.out.println("MAIN VAR: " + name); 
                     Symbol s = parser.symbolTable.addSymbol(name.toString(), "numeric");
                     if (s == null) {
                         System.err.println("Error: Variable '" + name + "' already declared");
                     }
                     RESULT = parser.createList(name.toString());
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_var_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main_var_list ::= main_var_list USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int mvlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mvlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> mvl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     //System.out.println("MAIN VAR: " + name); 
                     Symbol s = parser.symbolTable.addSymbol(name.toString(), "numeric");
                     if (s == null) {
                         System.err.println("Error: Variable '" + name + "' already declared");
                     }
                     RESULT = parser.appendToList(mvl, name.toString());
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_var_list",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procs ::= 
            {
              List<ProcedureNode> RESULT =null;
		 
            RESULT = new ArrayList<ProcedureNode>(); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procs ::= procs pdef 
            {
              List<ProcedureNode> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ProcedureNode> ps = (List<ProcedureNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ProcedureNode p = (ProcedureNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = parser.appendToList(ps, p); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procs",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              ProcedureNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
             // Add procedure name to symbol table as type-less
             Symbol procSym = parser.symbolTable.addSymbol(name.toString(), "PROCEDURE");
             if (procSym != null) {
                 procSym.setFunction(true);
                 procSym.setReturnType(null); // Procedures don't return
             }
             parser.symbolTable.enterScope(); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pdef ::= USER_DEFINED_NAME NT$0 LPAREN param_list RPAREN LBRACE body algo RBRACE 
            {
              ProcedureNode RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ProcedureNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> b = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> a = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            //System.out.println("PROCEDURE: " + name);
            List<String> localVars = (List<String>)b;
            RESULT = new ProcedureNode(name.toString(), params, localVars, a, -1, -1);
            parser.symbolTable.exitScope();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pdef",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcs ::= 
            {
              List<FunctionNode> RESULT =null;
		 
            RESULT = new ArrayList<FunctionNode>(); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funcs ::= funcs fdef 
            {
              List<FunctionNode> RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionNode> fs = (List<FunctionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionNode f = (FunctionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = parser.appendToList(fs, f); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              FunctionNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
             // Add function name to symbol table as type-less
             Symbol funcSym = parser.symbolTable.addSymbol(name.toString(), "FUNCTION");
             if (funcSym != null) {
                 funcSym.setFunction(true);
                 funcSym.setReturnType("numeric"); // All functions return numeric
             }
             parser.symbolTable.enterScope(); 
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fdef ::= USER_DEFINED_NAME NT$1 LPAREN param_list RPAREN LBRACE body algo RBRACE 
            {
              FunctionNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (FunctionNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> b = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> a = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            //System.out.println("FUNCTION: " + name);
            List<String> localVars = (List<String>)b;
            ASTNode returnValue = parser.findReturnValue(a);
            RESULT = new FunctionNode(name.toString(), params, localVars, a, returnValue, -1, -1);
            parser.symbolTable.exitScope();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= LOCAL LBRACE maxthree RBRACE 
            {
              List<String> RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<String> mt = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            //System.out.println("BODY with locals"); 
            RESULT = mt; // maxthree returns List<String>
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // maxthree ::= 
            {
              List<String> RESULT =null;
		 
               RESULT = new ArrayList<String>(); 
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maxthree",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // maxthree ::= USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                Symbol s = parser.symbolTable.addSymbol(p1.toString(), "numeric");
                if (s == null) {
                    System.err.println("Error: Parameter '" + p1 + "' already declared");
                }
                RESULT = parser.createList(p1.toString());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maxthree",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // maxthree ::= USER_DEFINED_NAME USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                Symbol s1 = parser.symbolTable.addSymbol(p1.toString(), "numeric");
                Symbol s2 = parser.symbolTable.addSymbol(p2.toString(), "numeric");
                if (s1 == null || s2 == null) {
                    System.err.println("Error: Duplicate parameter names");
                }
                RESULT = parser.createList(p1.toString());
                RESULT = parser.appendToList(RESULT, p2.toString());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maxthree",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // maxthree ::= USER_DEFINED_NAME USER_DEFINED_NAME USER_DEFINED_NAME 
            {
              List<String> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                Symbol s1 = parser.symbolTable.addSymbol(p1.toString(), "numeric");
                Symbol s2 = parser.symbolTable.addSymbol(p2.toString(), "numeric");
                Symbol s3 = parser.symbolTable.addSymbol(p3.toString(), "numeric");
                if (s1 == null || s2 == null || s3 == null) {
                    System.err.println("Error: Duplicate parameter names");
                }
                RESULT = parser.createList(p1.toString());
                RESULT = parser.appendToList(RESULT, p2.toString());
                RESULT = parser.appendToList(RESULT, p3.toString());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("maxthree",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param_list ::= maxthree 
            {
              List<String> RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> mt = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = mt; 
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              MainProgramNode RESULT =null;
 parser.symbolTable.enterScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // main_prog ::= VAR LBRACE NT$2 main_variables RBRACE algo 
            {
              MainProgramNode RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (MainProgramNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> vars = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int algoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int algoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ASTNode> algo = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                 //System.out.println("MAIN PROGRAM");
                 RESULT = new MainProgramNode(vars, algo, -1, -1);
                 parser.symbolTable.exitScope();
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_prog",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // algo ::= instr_list 
            {
              List<ASTNode> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ASTNode> il = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            //System.out.println("ALGO"); 
            RESULT = il;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("algo",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instr_list ::= instr 
            {
              List<ASTNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  //System.out.println("SINGLE INSTRUCTION"); 
                  RESULT = parser.createList(i);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instr_list ::= instr SEMI instr_list 
            {
              List<ASTNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int restright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<ASTNode> rest = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  //System.out.println("MULTIPLE INSTRUCTIONS"); 
                  List<ASTNode> result = new ArrayList<>();
                  result.add(i);           // Add current instruction FIRST
                  result.addAll(rest);     // Then add the rest
                  RESULT = result;
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instr ::= HALT 
            {
              ASTNode RESULT =null;
		 
             //System.out.println("INSTR: halt"); 
             RESULT = new HaltNode(-1, -1);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instr ::= PRINT output 
            {
              ASTNode RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode out = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
             //System.out.println("INSTR: print"); 
             RESULT = out;
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instr ::= USER_DEFINED_NAME LPAREN input RPAREN 
            {
              ASTNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> in = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
             //System.out.println("INSTR: proc call " + name); 
             RESULT = new ProcedureCallNode(name.toString(), in, -1, -1);
         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instr ::= assign 
            {
              ASTNode RESULT =null;
		int assgnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assgnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode assgn = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = assgn; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instr ::= loop 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = l; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instr ::= branch 
            {
              ASTNode RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode br = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = br; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instr ::= RETURN_KW atom 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              //System.out.println("INSTR: return");
              RESULT = new ReturnNode(a, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign ::= USER_DEFINED_NAME ASSIGN_OP USER_DEFINED_NAME LPAREN input RPAREN 
            {
              ASTNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> in = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              //System.out.println("ASSIGN: func call " + var + " = " + func);
              Symbol s = parser.symbolTable.lookup(var.toString());
              if (s == null || !s.getType().equals("numeric")) {
                  System.err.println("Type Error: Variable '" + var + "' must be numeric");
              }
              FunctionCallNode funcCall = new FunctionCallNode(func.toString(), in, -1, -1);
              RESULT = new AssignmentNode(var.toString(), funcCall, true, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign ::= USER_DEFINED_NAME ASSIGN_OP term 
            {
              ASTNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              //System.out.println("ASSIGN: " + var + " = expression");
              Symbol s = parser.symbolTable.lookup(var.toString());
              if (s == null) {
                  System.err.println("Type Error: Variable '" + var + "' not declared");
              }
              RESULT = new AssignmentNode(var.toString(), t, false, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // loop ::= WHILE_KW term LBRACE algo RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> a = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            //System.out.println("LOOP: while");
            RESULT = new LoopNode("while", t, a, -1, -1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // loop ::= DO_KW LBRACE algo RBRACE UNTIL term 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<ASTNode> a = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            //System.out.println("LOOP: do-until");
            RESULT = new LoopNode("do-until", t, a, -1, -1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // branch ::= IF_KW term LBRACE algo RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> a = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              //System.out.println("BRANCH: if");
              RESULT = new BranchNode(t, a, null, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // branch ::= IF_KW term LBRACE algo RBRACE ELSE_KW LBRACE algo RBRACE 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<ASTNode> a1 = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<ASTNode> a2 = (List<ASTNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              //System.out.println("BRANCH: if-else");
              RESULT = new BranchNode(t, a1, a2, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // output ::= atom 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              RESULT = new PrintNode(a, false, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // output ::= STRING 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              RESULT = new PrintNode(s, true, -1, -1);
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // input ::= 
            {
              List<ASTNode> RESULT =null;
		 
            RESULT = new ArrayList<ASTNode>(); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // input ::= atom 
            {
              List<ASTNode> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = parser.createList(a1); 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // input ::= atom atom 
            {
              List<ASTNode> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode a1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            List<ASTNode> list = parser.createList(a1);
            RESULT = parser.appendToList(list, a2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // input ::= atom atom atom 
            {
              List<ASTNode> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode a1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode a2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a3 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            List<ASTNode> list = parser.createList(a1);
            list = parser.appendToList(list, a2);
            RESULT = parser.appendToList(list, a3);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= atom 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = a; 
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= LPAREN unop term RPAREN 
            {
              ASTNode RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            //System.out.println("TERM: unary op " + u);
            RESULT = new UnopNode(u, t, -1, -1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= LPAREN term binop term RPAREN 
            {
              ASTNode RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
            //System.out.println("TERM: binary op " + b);
            RESULT = new BinopNode(b, t1, t2, -1, -1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atom ::= USER_DEFINED_NAME 
            {
              ASTNode RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = new AtomNode(name, -1, -1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atom ::= NUMBER 
            {
              ASTNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
            RESULT = new AtomNode(num, -1, -1);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unop ::= NEG 
            {
              String RESULT =null;
		 RESULT = "neg"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unop ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binop ::= EQ 
            {
              String RESULT =null;
		 RESULT = "eq"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binop ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binop ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binop ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binop ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "plus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binop ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // binop ::= MULT 
            {
              String RESULT =null;
		 RESULT = "mult"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // binop ::= DIV 
            {
              String RESULT =null;
		 RESULT = "div"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
